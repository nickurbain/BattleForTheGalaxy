package conflict.supernova;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL30;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.math.Vector3;

public class GameScreen implements Screen {
	
	ConflictSupernova game;
	OrthographicCamera camera;
	Texture texture_bg;
	Sprite sprite_bg;
	MainShip ship;
	Reticle reticle;
	
	EnemyShip enemyship;
	
	public GameScreen(ConflictSupernova game) {
		this.game = game;
		
		camera = new OrthographicCamera();
		camera.setToOrtho(false, 1600, 900);  // false => y-axis 0 is bottom-left
		
		texture_bg = new Texture(Gdx.files.internal("space-background.jpg"));
		texture_bg.setFilter(TextureFilter.Linear, TextureFilter.Linear);  // smoother rendering
		sprite_bg = new Sprite(texture_bg);
		
		ship = new MainShip();
		reticle = new Reticle();
		
		
		enemyship = new EnemyShip();
		
//		Cursor customCursor = Gdx.graphics.newCursor(new Pixmap(Gdx.files.internal("transparent-1px.png")), 0, 0);
//		Cursor customCursor = Gdx.graphics.newCursor(new Pixmap(Gdx.files.internal("reticle.png")), 0, 0);
//		Gdx.graphics.setCursor(customCursor);
		
//		Gdx.input.setCursorCatched(true);		// placed into show()
//		Gdx.input.setCursorPosition(800, 450);
		
//		customCursor.dispose();
		
	}
	
	

	@Override
	public void render(float delta) {
		Gdx.gl.glClearColor(0.05F, 0.05F, 0.05F, 0.05F);
		Gdx.gl.glClear(GL30.GL_COLOR_BUFFER_BIT);
		
		game.batch.setProjectionMatrix(camera.combined);  // combined projection and view matrix (has to do with )
		
		camera.position.set(ship.sprite.getX(), ship.sprite.getY(), 0);
		camera.update();
		
		game.batch.begin();
			game.batch.draw(texture_bg, 0, 0);
			ship.sprite.draw(game.batch);
			reticle.sprite.draw(game.batch);
			
			enemyship.sprite.draw(game.batch);
			
		game.batch.end();
		
		
		/*
		 * Keyboard and mouse input will go below
		 */
		
		if(Gdx.input.isKeyJustPressed(Keys.ESCAPE)) {
			dispose();
			System.exit(0);
		}
		
		ship.update(reticle);
		reticle.update();
		
		if(ship.bounds.overlaps(enemyship.bounds)) {
			enemyship.sprite.translateX(1);
			enemyship.bounds.x += 1;
		}

		
		
		
	}

	@Override
	public void show() {
		Gdx.input.setCursorCatched(true);
		Gdx.input.setCursorPosition(800, 450);
	}

	@Override
	public void resize(int width, int height) {
		
	}

	@Override
	public void pause() {
		
	}

	@Override
	public void resume() {
		
	}

	@Override
	public void hide() {
		
	}

	@Override
	public void dispose() {
		
	}

	
}
